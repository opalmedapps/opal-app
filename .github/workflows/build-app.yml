# SPDX-FileCopyrightText: Copyright 2025 Opal Health Informatics Group at the Research Institute of the McGill University Health Centre <john.kildea@mcgill.ca>
#
# SPDX-License-Identifier: Apache-2.0

# This workflow is explained in `docs/deployment/ci-cd.md`; please keep that documentation file up to date when making changes here.

name: Build App
# Default to dev when running automatically (see also "env" below)
run-name: Building the app for ${{ inputs.ENVIRONMENT || 'dev' }} ðŸ“¦
on:
  # When pushing to main, automatically build for dev
  push:
    branches:
      - main

  # Offer a manual interface to build for all other environments as needed
  workflow_dispatch:
    inputs:
      ENVIRONMENT:
        description: 'Environment in which to build'
        type: choice
        required: true
        default: 'dev'
        options:
          - dev
          - prod

# Read the target environment from workflow_dispatch inputs, or default to dev
env:
  ENVIRONMENT: ${{ inputs.ENVIRONMENT || 'dev' }}

permissions:
  contents: read

jobs:
  build-android:
    runs-on: macos-latest
    steps:
      # Setup
      - name: Convert environment to all caps
        run: echo ENVIRONMENT_CAPS="$(echo "$ENVIRONMENT" | tr '[:lower:]' '[:upper:]')" >> "$GITHUB_ENV"
      - name: Print environment
        run: |
          echo "Environment: $ENVIRONMENT ($ENVIRONMENT_CAPS)"
      - uses: actions/checkout@v4.2.2
        with:
          persist-credentials: false

      - name: Set up build
        uses: ./.github/actions/build-setup
        with:
          NPMRC_FILE: ${{ secrets.NPMRC_FILE }}
          ENV_CONFIG_JS: ${{ vars[format('{0}_CONFIG_JS', env.ENVIRONMENT_CAPS)] }}
          ENV_GOOGLE_SERVICES: ${{ vars[format('{0}_GOOGLE_SERVICES', env.ENVIRONMENT_CAPS)] }}

      # Build the app
      - name: Build the app
        run: npm run build:app:android --env="$ENVIRONMENT"
      - name: Rename build output
        id: rename-output
        run: |
          mv "./platforms/android/app/build/outputs/apk/debug/app-debug.apk" "opal-${ENVIRONMENT}.apk"
          echo "ARTIFACT_NAME=opal-${ENVIRONMENT}.apk" >> "$GITHUB_OUTPUT"
      - name: Archive build output
        uses: actions/upload-artifact@v4.6.2
        with:
          name: Android app
          path: ${{ steps.rename-output.outputs.ARTIFACT_NAME }}

  build-ios:
    runs-on: macos-latest
    steps:
      # Setup
      - name: Convert environment to all caps
        run: echo ENVIRONMENT_CAPS="$(echo "$ENVIRONMENT" | tr '[:lower:]' '[:upper:]')" >> "$GITHUB_ENV"
      - name: Print environment
        run: |
          echo "Environment: $ENVIRONMENT ($ENVIRONMENT_CAPS)"
      - uses: actions/checkout@v4.2.2
        with:
          persist-credentials: false

      - uses: ./.github/actions/build-setup
        with:
          NPMRC_FILE: ${{ secrets.NPMRC_FILE }}
          ENV_CONFIG_JS: ${{ vars[format('{0}_CONFIG_JS', env.ENVIRONMENT_CAPS)] }}
          ENV_GOOGLE_SERVICES: ${{ vars[format('{0}_GOOGLE_SERVICES', env.ENVIRONMENT_CAPS)] }}

      # Install an Apple certificate and provisioning profile used to build the app for iOS
      # See: https://docs.github.com/en/actions/use-cases-and-examples/deploying/installing-an-apple-certificate-on-macos-runners-for-xcode-development
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64_FILE }}
          P12_PASSWORD: ${{ secrets.BUILD_CERTIFICATE_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets[format('{0}_PROVISIONING_PROFILE_BASE64_FILE', env.ENVIRONMENT_CAPS)] }} # zizmor: ignore[overprovisioned-secrets]
          KEYCHAIN_PASSWORD: ${{ secrets.TEMPORARY_KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH="$RUNNER_TEMP"/build_certificate.p12
          PP_PATH="$RUNNER_TEMP"/build_pp.mobileprovision
          KEYCHAIN_PATH="$RUNNER_TEMP"/app-signing.keychain-db

          # Import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o "$CERTIFICATE_PATH"
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o "$PP_PATH"

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          # Options: -lut: lock keychain when the system sleeps, lock keychain after timeout interval, specify timeout interval in seconds
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          # Import certificate to keychain
          # Options: -P: specify wrapping passphrase immediately; -A: allow any application to access the imported key without warning; -t: type; -f: format; -k: target keychain to import into
          security import "$CERTIFICATE_PATH" -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
          # Options: -S: comma-separated list of of allowed partition IDs; -k: password for keychain (required)
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          # Options: -d: use the specified preference domain; -s: set the search list to the specified keychains
          security list-keychain -d user -s "$KEYCHAIN_PATH"

          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp "$PP_PATH" ~/Library/MobileDevice/Provisioning\ Profiles

      # Build the app
      - name: Build the app
        run: npm run build:app:ios:ci --env="$ENVIRONMENT" --devteam="$IOS_DEVELOPMENT_TEAM" --provisioningprofile="$PROVISIONING_PROFILE_UUID"
        env:
          IOS_DEVELOPMENT_TEAM: ${{ secrets.IOS_DEVELOPMENT_TEAM }}
          PROVISIONING_PROFILE_UUID: ${{ secrets[format('{0}_PROVISIONING_PROFILE_UUID', env.ENVIRONMENT_CAPS)] }} # zizmor: ignore[overprovisioned-secrets]
      - name: Rename build output
        id: rename-output
        run: |
          mv ./platforms/ios/build/Debug-iphoneos/*.ipa "opal-${ENVIRONMENT}.ipa"
          echo "ARTIFACT_NAME=opal-${ENVIRONMENT}.ipa" >> "$GITHUB_OUTPUT"
      - name: Archive build output
        uses: actions/upload-artifact@v4.6.2
        with:
          name: iOS app
          path: ${{ steps.rename-output.outputs.ARTIFACT_NAME }}

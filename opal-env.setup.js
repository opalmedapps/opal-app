const fs = require("fs");
const semver = require("semver");
const shelljs = require("shelljs");
const xmlJs = require("xml-js");

class OpalEnv {

    /********************************/
    /******* PUBLIC FUNCTIONS *******/
    /********************************/

    /**
     * @description Verifies if the directory for a given Opal environment exists. If not, an error is thrown.
     * @param {string} env The name of the environment, i.e. the name of a sub-folder in env/.
     */
    static verifyOpalEnvironmentExists(env) {
        const environments = this.getDirectories("./env");
        if (!env || env.includes("npm_config_env")) throw new Error(`Invalid environment; no value was provided. Use --env=___ at the end of your npm command to specify an environment to use; available choices: ${environments.join(", ")}`);
        if (environments.indexOf(env) === -1) throw new Error(`Unable to find environment "${env}" in ./env folder, please choose one of the following: ${environments.join(", ")}`);
    }

    /**
     * @description Copies all files from a given environment to the root directory.
     * @param {string} env The name of the environment, i.e. the name of a sub-folder in env/.
     */
    static copyEnvironmentFiles(env) {
        this.verifyOpalEnvironmentExists(env);
        const environment_folder = `./env/${env}/*`;
        shelljs.cp('-f', environment_folder, './');
        shelljs.cp('-f', './env/config.xml', './');
        this.insertConfigXmlPlaceholders(env);
    }

    /**
     * @description Sets the version and build numbers in the config.xml files of all environments
     *              (with one exception: in prod, only the version is set, not the build).
     * @author Stacey Beard
     * @date 2023-07-06
     * @param {string|null} version Version number passed to setVersion().
     * @param {string|null} build Build number(s) passed to setBuildNumber() (except for prod).
     */
    static setVersionAndBuildAllEnv(version = null, build = null) {
        const environments = this.getDirectories("./env");
        // Exception for prod: don't change the build number. This is done separately upon release.
        environments.forEach(env => this.setVersionAndBuild(version, (env === 'prod') ? 'same' : build, env));
    }

    /**
     * @name updateWebVersion
     * @author Stacey Beard
     * @date 2020-07-24
     * @description Updates the file web-version.json with the app's web version, taken from config.xml and opal.config.js.
     *              The web version is made available throughout the app as WEB_VERSION.version
     *              and WEB_VERSION.build via webpack's ProvidePlugin.
     *              If the target files are not found, generic default version numbers are used.
     * @param {string} env The name of the environment, i.e. the name of a sub-folder in env/.
     *                     This is needed because the build number for prod is different than for the other environments.
     */
    static updateWebVersion(env) {
        let versionNumber, buildNumber;

        // Try to set the build and version numbers, or use defaults upon failure
        try {
            versionNumber = this.getVersion();
        }
        catch (error) {
            versionNumber = "100.100.100";
            console.warn(`No version number found; using ${versionNumber}`);
        }
        try {
            buildNumber = this.getBuildNumber(env);
        }
        catch (error) {
            buildNumber = "1";
            console.warn(`No build number found; using ${buildNumber}`);
        }

        /* Write the numbers to ./web-version.json, which is made accessible everywhere in the app using
        * the webpack ProvidePlugin (as WEB_VERSION). The values in this file are used as the app's web version number.
        */
        fs.writeFileSync("./web-version.json", `{\n`
            + '    "_comment": "This file is automatically generated when building the app, using information from config.xml and opal.config.js; do not edit.",\n'
            + `    "version": "${versionNumber}",\n`
            + `    "build": "${buildNumber}"\n`
            + `}\n`
        );
    }

    /**
     * @description Reads and returns a specific environment setting from opal.config.js.
     * @author Stacey Beard
     * @date 2022-03-23
     * @param {string} settingName The name of the setting to read from the file.
     * @param {string} env The name of the environment to use.
     * @returns {*} The setting provided in the file.
     */
    static getEnvSetting(settingName, env) {
        const settings = this.getEnvSettings(env);
        if (!settings || typeof settings[settingName] === "undefined") throw new Error(`opal.config.js for environment "${env}" is missing the setting: "${settingName}". See env/opal.config.sample.js for details.`);
        return settings[settingName];
    }

    /**
     * @description Creates an empty www folder. This is necessary, because the app won't be considered a real
     *              cordova project without a www folder, and cordova commands will fail.
     */
    static createWWWFolder(){
        const path = "www";
        if (!shelljs.test('-d', path)) shelljs.mkdir(path);
    }

    /********************************/
    /******* PRIVATE FUNCTIONS ******/
    /********************************/

    /**
     * @description Helper function which gets the list of directories at a given path.
     * @param source The path at which to read the directories.
     * @returns {string[]} The list of directories at that path.
     */
    static getDirectories(source) {
        return fs.readdirSync(source, {withFileTypes: true})
            .filter(directory => directory.isDirectory())
            .map(directory => directory.name);
    }

    /**
     * @description Changes directory into the given /env sub-folder.
     * @param env The name of the environment to access.
     */
    static setDirectory(env) {
        this.verifyOpalEnvironmentExists(env);
        const dir = `./env/${env}`;
        shelljs.cd(dir);
    }

    /**
     * @description Reads and returns the environment settings from opal.config.js.
     * @author Stacey Beard
     * @date 2022-03-23
     * @param {string} env The name of the environment to use.
     * @returns {object} The settings object provided in the file.
     */
    static getEnvSettings(env) {
        const config = this.getOpalConfigJSON(env);
        if (!config || !config.settings) throw new Error(`opal.config.js for environment "${env}" is not correctly formatted with a "settings" property.`);
        return config.settings;
    }

    /**
     * @description Reads the app's version from config.xml in the /env directory.
     * @returns {string} The app's version number.
     */
    static getVersion() {
        const initialDirectory = shelljs.pwd().toString();
        shelljs.cd('./env/');
        let configFile = this.getConfigXMLJSON();
        shelljs.cd(initialDirectory);
        return configFile.elements[0].attributes.version;
    }

    /**
     * @description Reads the app's build number from an environment's opal.config.js file.
     * @returns {string} The app's build number.
     * @param {string} env The name of the environment, i.e. the name of a sub-folder in env/.
     */
    static getBuildNumber(env) {
        let envConfigs = this.getOpalConfigJSON(env);
        return envConfigs.configXml.BUILD_NUMBER;
    }

    /**
     * @desc Sets the version and build numbers in the config.xml file of the given environment.
     * @author Stacey Beard
     * @date 2023-03-30
     * @param {string|null} version Version number passed to setVersion().
     * @param {string|null} build Build number(s) passed to setBuildNumber().
     * @param {string|null} env Environment to update; if null, it updates the file in the root directory.
     */
    static setVersionAndBuild(version = null, build = null, env = null) {
        this.setVersion(version);
        this.setBuildNumber(build, env);
    }

    /**
     * @description Sets a new version number for the app (but not the build number).
     * @param {string|null} newVersion New version to set; if null, it increments the patch number by one.
     */
    static setVersion(newVersion = null) {
        const currentVersion = this.getVersion();
        newVersion = newVersion ? newVersion : semver.inc(currentVersion, "patch");
        console.log(`Version update: ${currentVersion}=>${newVersion}`);

        const initialDirectory = shelljs.pwd().toString();
        shelljs.cd('./env/');
        this.writeToConfigXML(this.setXMLWidgetAttributeText(this.getConfigXMLJSON(), "version", newVersion));
        shelljs.cd(initialDirectory);
    }

    /**
     * @description Sets a new build number for the app (but not the build number).
     * @param {string} env The name of the environment to update.
     * @param {number|null|string} buildNumber New build number for the app: either an integer representing the new value,
     *                                         or null, which updates the current value of both platforms by 1,
     *                                         or 'same', in which case the build numbers are not altered.
     */
    static setBuildNumber(buildNumber = null, env) {
        let envConfigs = this.getOpalConfigJSON(env);

        // Get existing build number
        let oldBuildNumber = envConfigs.configXml.BUILD_NUMBER;

        if (buildNumber === 'same') buildNumber = oldBuildNumber;
        else if (buildNumber) {
            buildNumber = Number(buildNumber);
            if (Number.isNaN(buildNumber)) throw new Error(`Build number ${buildNumber} must be numeric`);
        }
        else {
            buildNumber = oldBuildNumber + 1;
            console.log(`Incremented build number by 1`);
        }

        // Replace the build number in opal.config.js
        let rawConfigFile;
        let path = `./env/${env}/opal.config.js`;
        if (fs.existsSync(path)) rawConfigFile = fs.readFileSync(path).toString();
        else throw new Error("config.xml file not found");
        rawConfigFile.replace(/"BUILD_NUMBER": [0-9]+,/i, `"BUILD_NUMBER": ${buildNumber},`);
        fs.writeFileSync(path, rawConfigFile);

        console.log(`Build numbers for env: '${env}' set to ${buildNumber}`);
    }

    /**
     * @description Reads and returns the contents of opal.config.js (a JSON object) from the directory for
     *              the given environment.
     * @author Stacey Beard
     * @date 2022-03-23
     * @param {string} env The name of the environment to use.
     * @returns {object} The JSON object provided in the file.
     */
    static getOpalConfigJSON(env) {
        this.verifyOpalEnvironmentExists(env);
        const path = `./env/${env}/opal.config.js`;
        if (!fs.existsSync(path)) throw new Error(`File not found: ${path}`);
        return require(path);
    }

    /**
     * @description Read the config.xml file, converts it to a JSON object and returns it.
     *              Assumes a config.xml file exists in current directory.
     * @returns {Element} A JSON object representing the config file.
     */
    static getConfigXMLJSON() {
        if (fs.existsSync("./config.xml")) {
            return xmlJs.xml2js(fs.readFileSync("./config.xml").toString());
        }
        throw new Error("config.xml file not found");
    }

    /**
     * @description Writes content back to the config.xml file.
     *              Assumes the current directory contains this file.
     * @param {Element} configFile The new content to write.
     */
    static writeToConfigXML(configFile) {
        fs.writeFileSync("./config.xml", xmlJs.js2xml(configFile, {
            fullTagEmptyElement: false,
            indentCdata: true,
            spaces: 4,
        }));
    }

    /**
     * @description Modifies a specific attribute's value in an XML object.
     * @throws error Throws an error if no child elements are found that match the given childName.
     * @param {Element} xmlObject JavaScript object whose interface is the specified interface in the xml-js package.
     * @param attributeName Attribute name to modify in the xml.
     * @param newAttributeText New value for the attribute.
     * @example let xmlObject = xmlJs.xml2js('<widget version="1.8.10"></widget>');
     *          xmlObject = setXMLWidgetChildText(xmlObject, 'version', '1.8.11');
     *          xmlJs.js2xml(xmlObject); // returns '<widget version="1.8.11"></widget>'
     * @returns {Element} Returns the modified XML Element object.
     */
    static setXMLWidgetAttributeText(xmlObject, attributeName, newAttributeText) {
        if (xmlObject && attributeName && newAttributeText) {
            xmlObject.elements[0].attributes[String(attributeName)] = String(newAttributeText);
        }
        return xmlObject;
    }

    /**
     * @description Replaces all placeholders in config.xml by the values in opal.config.js for the given environment.
     *              Assumes a config.xml file exists in the current directory.
     * @param {string} env The name of the environment to use.
     */
    static insertConfigXmlPlaceholders(env) {
        let configXmlFile;
        if (fs.existsSync("./config.xml")) {
            configXmlFile = fs.readFileSync("./config.xml").toString();
        }
        else throw new Error("config.xml file not found");

        let envConfigs = this.getOpalConfigJSON(env);

        Object.entries(envConfigs.configXml).forEach(([placeholder, value]) => {
            configXmlFile = configXmlFile.replaceAll('${' + placeholder + '}', value);
        });

        fs.writeFileSync("./config.xml", configXmlFile);
    }
}
module.exports = OpalEnv;

# SPDX-FileCopyrightText: Copyright (C) 2022 Opal Health Informatics Group at the Research Institute of the McGill University Health Centre <john.kildea@mcgill.ca>
#
# SPDX-License-Identifier: Apache-2.0

# For a more human-readable description of the workflows outlined in this file, see `.docs/deployment/ci-cd.md`
# When editing this file, please make sure to also keep `ci-cd.md` up to date.

default:
  # run jobs on GitLab shared runners by default
  # only run those jobs that need our own build machine (macOS) specifically
  image: node:22.14.0-alpine3.21
  # Cache modules in between pipelines
  # See: https://javascript.plainenglish.io/improving-ci-performance-aka-how-to-save-your-money-31ff691360e4
  cache:
    # compute cache key from lock file
    # https://docs.gitlab.com/ee/ci/caching/#compute-the-cache-key-from-the-lock-file
    key:
      files:
        - package-lock.json
    paths:
      - .npm/


variables:
  ENV: "dev"  # The environment used in the app build command
  ENV_CONFIG_JS: $ENV_CONFIG_JS_DEV  # The contents of the file `env/*/opal.config.js`, used globally in the app
  ENV_GOOGLE_SERVICES: $ENV_GOOGLE_SERVICES_DEV  # The contents of the file `env/*/google-services.json`, used to build the mobile app
  FIREBASE_APP_ANDROID: $FIREBASE_APP_DEV_ANDROID  # The Android App ID of the firebase project to which the app is uploaded
  FIREBASE_APP_IOS: $FIREBASE_APP_DEV_IOS  # The iOS App ID of the firebase project to which the app is uploaded
  FIREBASE_GROUP: "general"  # The name of the group to which the app is automatically deployed (via Firebase App Distribution)
  GOOGLE_APPLICATION_CREDENTIALS: $GOOGLE_APPLICATION_CREDENTIALS_DEV  # The service account providing permissions to upload to Firebase App Distribution
  VERSION_TAG_REGEX: /^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/  # The tag semver regex recognized as a release, see: https://ihateregex.io/expr/semver/

  # Override for SAST: https://docs.gitlab.com/ee/user/application_security/sast/#vulnerability-filters
  # Avoid scanning the ui-bootstrap library twice; only scan the Opal version
  SAST_EXCLUDED_PATHS: "spec, test, tests, tmp, src/lib/*-original.js"


workflow:
  rules:
    # Rules for semantic-release: do not run on commits made by semantic-release, only run on the version tags it creates
    - if: $GITLAB_USER_LOGIN == "opal-release-bot" && $CI_COMMIT_BRANCH
      when: never
    - if: $CI_COMMIT_TAG =~ $VERSION_TAG_REGEX

    # Prevent duplicate pipelines when a commit is pushed to an open merge request
    # See: https://docs.gitlab.com/ee/ci/yaml/workflow.html#switch-between-branch-pipelines-and-merge-request-pipelines
    # Source: https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Workflows/MergeRequest-Pipelines.gitlab-ci.yml
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH


# Project variables: the following variables must be configured in the project's CI/CD settings
#
# ANDROID_UPLOAD_KEY_ALIAS: The alias of the upload key in the keystore at $ANDROID_UPLOAD_KEY_PATH.
# ANDROID_UPLOAD_KEY_PASSWORD: The password of the upload key (keystore) used to sign the app at $ANDROID_UPLOAD_KEY_PATH.
# ANDROID_UPLOAD_KEY_PATH: Path to the Android upload signing key (keystore) used to sign the app on the build Mac.
# ENV_CONFIG_JS_<ENV>: The contents of each environment's `opal.config.js` file.
# ENV_GOOGLE_SERVICES_<ENV>: The contents of each environment's `google-services.json` file.
# FIREBASE_APP_<ENV>_ANDROID: The Android App ID of each environment's firebase project.
# FIREBASE_APP_<ENV>_IOS: The iOS App ID of each environment's firebase project.
# FTP_HOST, FTP_PASSWORD, FTP_USER: Credentials used to deploy the web app.
# GITLAB_TOKEN: Token used by semantic-release to commit files (e.g. config.xml with updated version number). See: https://docs.gitlab.com/ee/user/project/settings/project_access_tokens.html.
# GOOGLE_APPLICATION_CREDENTIALS_<ENV>: Google service account key that provides write permissions for Firebase App Distribution (see more details below).
# IOS_DEVELOPMENT_TEAM: The development team used by cordova to sign the build, created via `cordova build ios --developmentTeam=___`.

stages:
  - check
  - prepare
  - build
  # Required for security scanning jobs
  - test
  - deploy
  - dast
  - post


# Does a test-run of dependency installation to quickly give feedback on whether dependency installation will fail
check dependencies:
  stage: check
  rules:
    - when: always
  before_script:
      # add npmrc file with XLTS.dev registry token
    - '[ -z "$NPMRC_FILE"] && echo "Error: environment variable NPMRC_FILE must be defined for this job" && exit 1'
    - echo "$NPMRC_FILE" > .npmrc
  script:
    - npm -v
    - npm ci --cache .npm --prefer-offline

# Sets a new version number for the app when committing to the default branch
increment version:
  stage: prepare
  variables:
    # Prevent reading deleted version tags: https://stackoverflow.com/questions/66047044/deleted-tags-are-present-in-gitlab-ci
    GIT_STRATEGY: clone
  rules:
    # Run automatically on every commit to the default branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  before_script:
    # Set semantic-release author to our own bot user for correct attribution
    - apk add --no-cache curl jq
    # add npmrc file with XLTS.dev registry token
    - '[ -z "$NPMRC_FILE"] && echo "Error: environment variable NPMRC_FILE must be defined for this job" && exit 1'
    - echo "$NPMRC_FILE" > .npmrc
    # use pipe operator to be able to use a colon in the command
    - | 
      RESPONSE=$(curl -s -X GET -H "PRIVATE-TOKEN: ${GITLAB_TOKEN}" "${CI_API_V4_URL}/user")
    - export GIT_AUTHOR_EMAIL=$(echo $RESPONSE | jq ".email")
    - export GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL
    - echo "semantic-release-bot email is ${GIT_AUTHOR_EMAIL}"
    # Install dependencies for semantic-release
    - apk add --no-cache git
    - npm ci --include dev --cache .npm --prefer-offline
  script:
    - npx semantic-release

# Extended job for building the app
# Builds automatically for release tags, or manually on other branches as needed
.build:
  stage: build
  rules:
    # Only build automatically for release tags
    - if: $CI_COMMIT_TAG =~ $VERSION_TAG_REGEX
    # Inverse of the rule from 'increment version'; this prevents the build from executing on the pipeline that modifies the version number
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: never
    # In all other cases, builds can be executed manually as needed
    - when: manual
      # prevent later stages to be blocked
      # see: https://docs.gitlab.com/ee/ci/yaml/#when (additional details section)
      allow_failure: true
  before_script:
    # add npmrc file with XLTS.dev registry token
    - '[ -z "$NPMRC_FILE"] && echo "Error: environment variable NPMRC_FILE must be defined for this job" && exit 1'
    - echo "$NPMRC_FILE" > .npmrc
    - npm -v
    - npm ci --cache .npm --prefer-offline
    - echo "$ENV"
    # Get the environment files needed to build the app from project-level CI/CD variables
    - mkdir env/$ENV
    - echo "$ENV_CONFIG_JS" > env/$ENV/opal.config.js
    - echo "$ENV_GOOGLE_SERVICES" > env/$ENV/google-services.json


# Extended job for building the app in release mode
.build release:
  # Use our build Mac
  tags:
    - macos
  extends: .build
  # Override the rules from .build
  rules:
    # Inverse of the rule from 'increment version'; this prevents the build from executing on the pipeline that modifies the version number
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: never
    # On version tags for the prod environment, release builds can be executed manually as needed
    - if: $CI_COMMIT_TAG =~ $VERSION_TAG_REGEX && $ENV == "prod"
      when: manual
      # Prevent later stages from being blocked: https://docs.gitlab.com/ee/ci/yaml/#when (additional details section)
      allow_failure: true

# Builds the app for Android
build android:
  # use our build Mac
  tags:
    - macos
  extends: .build
  script:
    - java -version
    - gradle -v
    - npm run build:app:android:device --env=$ENV
    - mv "./platforms/android/app/build/outputs/apk/debug/app-debug.apk" "opal-$ENV.apk"
  artifacts:
    expire_in: 1 day
    paths:
      - opal-$ENV.apk

# Builds and signs the app for Android with 'release' settings
build android release (apk):
  extends: .build release
  script:
    # Load aliases for zipalign and apksigner: https://gitlab.com/gitlab-org/gitlab-runner/-/issues/1083#note_3816106
    - shopt -s expand_aliases
    # Check that all required tools are available
    - java -version
    - gradle -v
    - apksigner --version
    # Build the apk in release mode
    - npm run build:app:android:device:release:apk --env=$ENV
    - mv ./platforms/android/app/build/outputs/apk/release/app-release-unsigned.apk app-release-unsigned.apk
    # Sign the apk
    - zipalign -v -f -p 4 app-release-unsigned.apk app-unsigned-aligned.apk
    - apksigner sign --ks $ANDROID_UPLOAD_KEY_PATH --ks-pass pass:$ANDROID_UPLOAD_KEY_PASSWORD --out app-release-signed.apk app-unsigned-aligned.apk
    # Check that the apk was signed correctly
    - apksigner verify app-release-signed.apk
    # Prepare the artifact
    - mv app-release-signed.apk "opal-$ENV-release-signed.apk"
  artifacts:
    expire_in: 1 day
    paths:
      - opal-$ENV-release-signed.apk

# Builds and signs an app bundle for Android with 'release' settings
build android release (aab):
  extends: .build release
  script:
    # Check that all required tools are available
    - java -version
    - gradle -v
    # Build the aab in release mode
    - npm run build:app:android:device:release --env=$ENV
    - mv ./platforms/android/app/build/outputs/bundle/release/app-release.aab app-release-unsigned.aab
    # Sign the aab
    - jarsigner -verbose -sigalg SHA512withRSA -digestalg SHA512 -keystore $ANDROID_UPLOAD_KEY_PATH -storepass $ANDROID_UPLOAD_KEY_PASSWORD -signedjar app-release-signed.aab app-release-unsigned.aab $ANDROID_UPLOAD_KEY_ALIAS
    # Prepare the artifact
    - mv app-release-signed.aab "opal-$ENV-release-signed.aab"
  artifacts:
    expire_in: 1 day
    paths:
      - opal-$ENV-release-signed.aab

# Builds the app for iOS
build ios:
  # use our build Mac
  tags:
    - macos
  extends: .build
  script:
    # Fixes Bus Error when cordova invokes pod install
    # See: https://stackoverflow.com/a/70581304
    - gem install --user-install ffi -- --enable-libffi-alloc
    - npm run build:app:ios:device:ci --env=$ENV --devteam=$IOS_DEVELOPMENT_TEAM
    - mv ./platforms/ios/build/Debug-iphoneos/*.ipa "opal-$ENV.ipa"
  artifacts:
    expire_in: 1 day
    paths:
      - opal-$ENV.ipa

# Builds the web version of the app
build web:
  extends: .build
  script:
    - npm run build:web --env=$ENV
  artifacts:
    expire_in: 1 day
    paths:
      - www
  # Override of the base .build rules, to ensure web builds are run automatically
  rules:
    # Inverse of the rule from 'increment version'; this prevents the build from executing on the pipeline that modifies the version number
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: never
    # In all other cases, execute web builds automatically
    - when: always

# Extended job for deploying the app; deploys to Firebase automatically based on release tags
#   Note: Deployment implicitly uses a service account ($GOOGLE_APPLICATION_CREDENTIALS) defined in the pipeline variables
#   This service account provides permissions for uploading to Firebase App Distribution
#   See: https://firebase.google.com/docs/app-distribution/authenticate-service-account.md?platform=android
.deploy app to firebase:
  stage: deploy
  # require web app to be deployed (which uses the environment)
  needs:
    - deploy web
  rules:
    # Only release the app from release tags
    - if: $CI_COMMIT_TAG =~ $VERSION_TAG_REGEX
  before_script:
    - apk add --no-cache git
    - RELEASE_NOTES="Build created and deployed by GitLab CI/CD for environment '$ENV' on $(git log --format=medium -n 1)"
    - echo "$RELEASE_NOTES"
    # Convert the service account variable to a file. This is required because variables defined in .gitlab-ci.yml (when triggering a downstream pipeline) cannot be files.
    # See: https://docs.gitlab.com/ee/ci/variables/#use-a-gitlab-ciyml-variable-as-a-file-type-variable
    - echo "$GOOGLE_APPLICATION_CREDENTIALS" > service-account.txt
    - export GOOGLE_APPLICATION_CREDENTIALS=service-account.txt

# Deploys the Android app to Firebase
deploy android to firebase:
  extends: .deploy app to firebase
  script:
    - npx firebase-tools appdistribution:distribute opal-$ENV.apk --app $FIREBASE_APP_ANDROID --release-notes "$RELEASE_NOTES" --groups $FIREBASE_GROUP
  needs:
    - job: build android

# Deploys the iOS app to Firebase
deploy ios to firebase:
  extends: .deploy app to firebase
  script:
    - npx firebase-tools appdistribution:distribute opal-$ENV.ipa --app $FIREBASE_APP_IOS --release-notes "$RELEASE_NOTES" --groups $FIREBASE_GROUP
  needs:
    - job: build ios

# Deploys the web app online
deploy web:
  stage: deploy
  environment: $ENV
  needs:
    - build web
  rules:
    # Only release the web version from release tags
    - if: $CI_COMMIT_TAG =~ $VERSION_TAG_REGEX
  script:
    - apk add --no-cache lftp
    - lftp --version
    - echo "listing working directory..."
    - ls -la
    - echo "deploying to ${CI_ENVIRONMENT_NAME}"
    - echo "transferring files and listing remote directory..."
    # lftp mirror arguments: https://www.cyberciti.biz/faq/lftp-mirror-example/
    - >
      lftp -e "
        set cmd:fail-exit yes; 
        open $FTP_HOST; 
        user $FTP_USER $FTP_PASSWORD; 
        mirror --exclude='app' --exclude='content' --reverse --delete --verbose ./static/landingpage/ ./app/${CI_ENVIRONMENT_NAME}/;
        mirror --reverse --delete --use-pget-n=10 --verbose ./www/ ./app/${CI_ENVIRONMENT_NAME}/app/;
        ls -la app/${CI_ENVIRONMENT_NAME}; 
        bye
      "

include:
  - component: $CI_SERVER_FQDN/opalmedapps/engineering/ci-templates/check-thirdparty-notice@main
    inputs:
      package-file: package.json
      additional-dependencies: angular-ui-bootstrap Roboto-Font
  # Add Reuse job: https://reuse.software/
  - project: 'opalmedapps/engineering/ci-templates'
    file: '/templates/jobs/Reuse.gitlab-ci.yml'
      
  # use latest template versions to run security scanning jobs also in merge request pipelines:
  # https://docs.gitlab.com/ee/user/application_security/index.html#use-security-scanning-tools-with-merge-request-pipelines
  # Secret Detection: https://docs.gitlab.com/ee/user/application_security/secret_detection/
  # See: https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/Secret-Detection.latest.gitlab-ci.yml
  - template: Jobs/Secret-Detection.latest.gitlab-ci.yml
  # Dependency Scanning: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/
  # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/Dependency-Scanning.latest.gitlab-ci.yml
  - template: Jobs/Dependency-Scanning.latest.gitlab-ci.yml
  # SAST Scanning: https://docs.gitlab.com/ee/user/application_security/sast/
  # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/SAST.latest.gitlab-ci.yml
  - template: Jobs/SAST.latest.gitlab-ci.yml
  # DAST Scanning: https://docs.gitlab.com/ee/user/application_security/dast/
  # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Security/DAST.latest.gitlab-ci.yml
  - template: DAST.latest.gitlab-ci.yml

# Secret Detection Customization:
# https://docs.gitlab.com/ee/user/application_security/secret_detection/pipeline/index.html#overriding-the-analyzer-jobs
secret_detection:
  # Prevent default access to artifacts from previous stages, to avoid scanning for secrets in the npm cache (.npm)
  needs: []

# SAST Scanning Customization:
# https://docs.gitlab.com/ee/user/application_security/sast/#pre-compilation
# https://docs.gitlab.com/ee/user/application_security/sast/#overriding-sast-jobs
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Jobs/SAST.latest.gitlab-ci.yml

# DAST Scanning Customization:
# https://docs.gitlab.com/ee/user/application_security/dast/browser/configuration/requirements.html
# https://docs.gitlab.com/ee/user/application_security/dast/browser/configuration/enabling_the_analyzer.html
dast:
  needs: ["deploy web"]
  # https://docs.gitlab.com/ee/user/application_security/dast/browser/configuration/variables.html
  variables:
    DAST_WEBSITE: "https://dev.app.opalmedapps.ca"
    DAST_BROWSER_SCAN: "true"
    # enables active scanning
    # https://docs.gitlab.com/ee/user/application_security/dast/browser/checks/#active-checks
    # DAST_FULL_SCAN_ENABLED: "true"
  # can only run in the same pipeline as the dependent job (deploy web)
  rules:
    # Only release the web version from release tags
    - if: $CI_COMMIT_TAG =~ $VERSION_TAG_REGEX

# Extended job for launching a downstream pipeline in another environment
# See: https://docs.gitlab.com/ee/ci/pipelines/downstream_pipelines.html
.build and deploy downstream:
  stage: post
  rules:
    # Avoid infinite recursion
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
      when: never
    # Only offer build and deployment in other environments after automatic build and deployment for Dev
    - if: $CI_COMMIT_TAG =~ $VERSION_TAG_REGEX
      when: manual
  trigger:
    include:
      - local: .gitlab-ci.yml

# Launches a downstream pipeline to build for the Demo environment
build and deploy demo:
  extends: .build and deploy downstream
  variables:
    # Override pipeline variables to run for the Demo environment
    ENV: "demo"
    ENV_CONFIG_JS: $ENV_CONFIG_JS_DEMO
    ENV_GOOGLE_SERVICES: $ENV_GOOGLE_SERVICES_DEMO
    FIREBASE_APP_ANDROID: $FIREBASE_APP_DEMO_ANDROID
    FIREBASE_APP_IOS: $FIREBASE_APP_DEMO_IOS
    GOOGLE_APPLICATION_CREDENTIALS: $GOOGLE_APPLICATION_CREDENTIALS_DEMO

# Launches a downstream pipeline to build for the DevOps environment
build and deploy devops:
  extends: .build and deploy downstream
  variables:
    # Override pipeline variables to run for the DevOps environment
    ENV: "devops"
    ENV_CONFIG_JS: $ENV_CONFIG_JS_DEVOPS
    ENV_GOOGLE_SERVICES: $ENV_GOOGLE_SERVICES_DEVOPS
    FIREBASE_APP_ANDROID: $FIREBASE_APP_DEVOPS_ANDROID
    FIREBASE_APP_IOS: $FIREBASE_APP_DEVOPS_IOS
    GOOGLE_APPLICATION_CREDENTIALS: $GOOGLE_APPLICATION_CREDENTIALS_DEVOPS

# Launches a downstream pipeline to build for the PreProd environment
build and deploy preprod:
  extends: .build and deploy downstream
  variables:
    # Override pipeline variables to run for the PreProd environment
    ENV: "preprod"
    ENV_CONFIG_JS: $ENV_CONFIG_JS_PREPROD
    ENV_GOOGLE_SERVICES: $ENV_GOOGLE_SERVICES_PREPROD
    FIREBASE_APP_ANDROID: $FIREBASE_APP_PREPROD_ANDROID
    FIREBASE_APP_IOS: $FIREBASE_APP_PREPROD_IOS
    GOOGLE_APPLICATION_CREDENTIALS: $GOOGLE_APPLICATION_CREDENTIALS_PREPROD

# Launches a downstream pipeline to build for the prod environment
build and deploy prod:
  extends: .build and deploy downstream
  variables:
    # Override pipeline variables to run for the prod environment
    ENV: "prod"
    ENV_CONFIG_JS: $ENV_CONFIG_JS_PROD
    ENV_GOOGLE_SERVICES: $ENV_GOOGLE_SERVICES_PROD
    FIREBASE_APP_ANDROID: $FIREBASE_APP_PROD_ANDROID
    FIREBASE_APP_IOS: $FIREBASE_APP_PROD_IOS
    GOOGLE_APPLICATION_CREDENTIALS: $GOOGLE_APPLICATION_CREDENTIALS_PROD

# Launches a downstream pipeline to build for the QA environment
build and deploy qa:
  extends: .build and deploy downstream
  variables:
    # Override pipeline variables to run for the QA environment
    ENV: "qa"
    ENV_CONFIG_JS: $ENV_CONFIG_JS_QA
    ENV_GOOGLE_SERVICES: $ENV_GOOGLE_SERVICES_QA
    FIREBASE_APP_ANDROID: $FIREBASE_APP_QA_ANDROID
    FIREBASE_APP_IOS: $FIREBASE_APP_QA_IOS
    GOOGLE_APPLICATION_CREDENTIALS: $GOOGLE_APPLICATION_CREDENTIALS_QA

# Launches a downstream pipeline to build for the Staging environment
build and deploy staging:
  extends: .build and deploy downstream
  variables:
    # Override pipeline variables to run for the Staging environment
    ENV: "staging"
    ENV_CONFIG_JS: $ENV_CONFIG_JS_STAGING
    ENV_GOOGLE_SERVICES: $ENV_GOOGLE_SERVICES_STAGING
    FIREBASE_APP_ANDROID: $FIREBASE_APP_STAGING_ANDROID
    FIREBASE_APP_IOS: $FIREBASE_APP_STAGING_IOS
    GOOGLE_APPLICATION_CREDENTIALS: $GOOGLE_APPLICATION_CREDENTIALS_STAGING

# For a more human-readable description of the workflows outlined in this file, see `.docs/deployment/ci-cd.md`
# When editing this file, please make sure to also keep `ci-cd.md` up to date.

default:
  tags:
    - macos

variables:
  ENV: "dev"  # The environment used in the app build command
  FIREBASE_APP_ANDROID: $FIREBASE_APP_DEV_ANDROID  # The Android App ID of the firebase project to which the app is uploaded
  FIREBASE_APP_IOS: $FIREBASE_APP_DEV_IOS  # The iOS App ID of the firebase project to which the app is uploaded
  FIREBASE_GROUP: "general"  # The name of the group to which the app is automatically deployed (via Firebase App Distribution)

# Anchors used throughout this file. See: https://docs.gitlab.com/ee/ci/yaml/yaml_optimization.html
.shared_anchors:
  rules: &has_version_tag
    # For semver regex, see: https://ihateregex.io/expr/semver/
    - if: $CI_COMMIT_TAG =~ /^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/

workflow:
  rules:
    # Rules for semantic-release: do not run on commits made by semantic-release, only run on the version tags it creates
    - if: $GITLAB_USER_NAME == "semantic-release" && $CI_COMMIT_BRANCH
      when: never
    - *has_version_tag

    # Prevent duplicate pipelines when a commit is pushed to an open merge request
    # See: https://docs.gitlab.com/ee/ci/yaml/workflow.html#switch-between-branch-pipelines-and-merge-request-pipelines
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

# Project variables: the following variables must be configured in the project's CI/CD settings
#
# FIREBASE_APP_DEV_ANDROID (variable): The Android App ID of the dev firebase project.
# FIREBASE_APP_DEV_IOS (variable): The iOS App ID of the dev firebase project.
# GOOGLE_APPLICATION_CREDENTIALS (file): Google service account key that provides write permissions for Firebase App Distribution (see more details below).
# IOS_DEVELOPMENT_TEAM (variable): The development team used by cordova to sign the build created via `cordova build ios --developmentTeam=___`.
# GITLAB_TOKEN (variable): Token used by semantic-release to commit files (e.g. config.xml with updated version number). See: https://docs.gitlab.com/ee/user/project/settings/project_access_tokens.html.

stages:
  - check
  - prepare
  - build
  - deploy

# Does a test-run of dependency installation to quickly give feedback on whether dependency installation will fail
check dependencies:
  stage: check
  rules:
    - when: always
  script:
    - npm -v
    - npm ci --prefer-offline

# Sets a new version number for the app when committing to the default branch
increment version:
  stage: prepare
  variables:
    # Prevent reading deleted version tags: https://stackoverflow.com/questions/66047044/deleted-tags-are-present-in-gitlab-ci
    GIT_STRATEGY: clone
  rules:
    # Run automatically on every commit to the default branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
  before_script:
    - npm install semantic-release@19.0.5 @semantic-release/changelog@6.0.3 @semantic-release/exec@6.0.3 @semantic-release/git@10.0.1
  script:
    - npx semantic-release

# Extended job for building the app
# Builds automatically for release tags, or manually on other branches as needed
.build:
  stage: build
  rules:
    # Only build automatically for release tags
    - *has_version_tag
    # Inverse of the rule from 'increment version'; this prevents the build from executing on the pipeline that modifies the version number
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: never
    # In all other cases, builds can be executed manually as needed
    - when: manual
  before_script:
    - npm -v
    - npm ci --prefer-offline
    - echo "$ENV"

# Builds the app for Android
build android:
  extends: .build
  script:
    - java -version
    - gradle -v
    - npm run build:app:android:device --env=$ENV
    - mv "./platforms/android/app/build/outputs/apk/debug/app-debug.apk" "opal-$ENV.apk"
  artifacts:
    expire_in: 1 day
    paths:
      - opal-$ENV.apk

# Builds the app for iOS
build ios:
  extends: .build
  script:
    # Fixes Bus Error when cordova invokes pod install
    # See: https://stackoverflow.com/a/70581304
    - gem install --user-install ffi -- --enable-libffi-alloc
    - npm run build:app:ios:device:ci --env=$ENV --devteam=$IOS_DEVELOPMENT_TEAM
    - mv ./platforms/ios/build/device/*.ipa "opal-$ENV.ipa"
  artifacts:
    expire_in: 1 day
    paths:
      - opal-$ENV.ipa

# Extended job for deploying the app; deploys to Firebase automatically based on release tags
#   Note: Deployment implicitly uses a service account ($GOOGLE_APPLICATION_CREDENTIALS) defined in the GitLab project settings
#   This service account provides permissions for uploading to Firebase App Distribution
#   See: https://firebase.google.com/docs/app-distribution/authenticate-service-account.md?platform=android
.deploy to firebase:
  stage: deploy
  rules:
    # Only release the app from release tags
    - *has_version_tag
  before_script:
    - RELEASE_NOTES="Build created and deployed by GitLab CI/CD for environment '$ENV' on $(git log --format=medium -n 1)"
    - echo "$RELEASE_NOTES"

# Deploys the Android app to Firebase
deploy android to firebase:
  extends: .deploy to firebase
  script:
    - firebase appdistribution:distribute opal-$ENV.apk --app $FIREBASE_APP_ANDROID --release-notes "$RELEASE_NOTES" --groups $FIREBASE_GROUP
  needs:
    - job: build android

# Deploys the iOS app to Firebase
deploy ios to firebase:
  extends: .deploy to firebase
  script:
    - firebase appdistribution:distribute opal-$ENV.ipa --app $FIREBASE_APP_IOS --release-notes "$RELEASE_NOTES" --groups $FIREBASE_GROUP
  needs:
    - job: build ios
